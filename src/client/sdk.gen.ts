// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetApiStockDocumentApiData, GetApiStockDocumentApiResponse, GetApiStockDocumentApiByStockDocumentNumberData, GetApiStockDocumentApiByStockDocumentNumberResponse, GetApiStockMovementApiByIdData, GetApiStockMovementApiByIdResponse, PostApiStockMovementApiData, PostApiStockMovementApiResponse, PostApiStockMovementApiPrintImportLabelData, PostApiStockMovementApiPrintExportLabelData, PostRegisterData, PostRegisterError, PostLoginData, PostLoginResponse, PostRefreshData, PostRefreshResponse, MapIdentityApiConfirmEmailData, PostResendConfirmationEmailData, PostForgotPasswordData, PostForgotPasswordError, PostResetPasswordData, PostResetPasswordError, PostManage2FaData, PostManage2FaResponse, PostManage2FaError, GetManageInfoData, GetManageInfoResponse, GetManageInfoError, PostManageInfoData, PostManageInfoResponse, PostManageInfoError, GetApiWarehousePlaceApiData, GetApiWarehousePlaceApiResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

export const getApiStockDocumentApi = <ThrowOnError extends boolean = false>(options?: Options<GetApiStockDocumentApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiStockDocumentApiResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/StockDocumentApi',
        ...options
    });
};

export const getApiStockDocumentApiByStockDocumentNumber = <ThrowOnError extends boolean = false>(options: Options<GetApiStockDocumentApiByStockDocumentNumberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiStockDocumentApiByStockDocumentNumberResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/StockDocumentApi/{stockDocumentNumber}',
        ...options
    });
};

export const getApiStockMovementApiById = <ThrowOnError extends boolean = false>(options: Options<GetApiStockMovementApiByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiStockMovementApiByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/StockMovementApi/{id}',
        ...options
    });
};

export const postApiStockMovementApi = <ThrowOnError extends boolean = false>(options?: Options<PostApiStockMovementApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiStockMovementApiResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/StockMovementApi',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postApiStockMovementApiPrintImportLabel = <ThrowOnError extends boolean = false>(options?: Options<PostApiStockMovementApiPrintImportLabelData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/StockMovementApi/PrintImportLabel',
        ...options
    });
};

export const postApiStockMovementApiPrintExportLabel = <ThrowOnError extends boolean = false>(options?: Options<PostApiStockMovementApiPrintExportLabelData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/StockMovementApi/PrintExportLabel',
        ...options
    });
};

export const postRegister = <ThrowOnError extends boolean = false>(options: Options<PostRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PostRegisterError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postLogin = <ThrowOnError extends boolean = false>(options: Options<PostLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLoginResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postRefresh = <ThrowOnError extends boolean = false>(options: Options<PostRefreshData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRefreshResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const mapIdentityApiConfirmEmail = <ThrowOnError extends boolean = false>(options: Options<MapIdentityApiConfirmEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/confirmEmail',
        ...options
    });
};

export const postResendConfirmationEmail = <ThrowOnError extends boolean = false>(options: Options<PostResendConfirmationEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/resendConfirmationEmail',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postForgotPassword = <ThrowOnError extends boolean = false>(options: Options<PostForgotPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PostForgotPasswordError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/forgotPassword',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postResetPassword = <ThrowOnError extends boolean = false>(options: Options<PostResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PostResetPasswordError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/resetPassword',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postManage2Fa = <ThrowOnError extends boolean = false>(options: Options<PostManage2FaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostManage2FaResponse, PostManage2FaError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/manage/2fa',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getManageInfo = <ThrowOnError extends boolean = false>(options?: Options<GetManageInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetManageInfoResponse, GetManageInfoError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/manage/info',
        ...options
    });
};

export const postManageInfo = <ThrowOnError extends boolean = false>(options: Options<PostManageInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostManageInfoResponse, PostManageInfoError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/manage/info',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getApiWarehousePlaceApi = <ThrowOnError extends boolean = false>(options?: Options<GetApiWarehousePlaceApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiWarehousePlaceApiResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/WarehousePlaceApi',
        ...options
    });
};